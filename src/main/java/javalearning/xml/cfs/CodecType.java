//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.06.14 at 11:04:31 AM AEST 
//


package javalearning.xml.cfs;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CodecType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="CodecType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="G711U"/>
 *     &lt;enumeration value="G711A"/>
 *     &lt;enumeration value="G726"/>
 *     &lt;enumeration value="G729"/>
 *     &lt;enumeration value="G722/8000"/>
 *     &lt;enumeration value="AMR-WB/16000"/>
 *     &lt;enumeration value="AMR/8000"/>
 *     &lt;enumeration value="EVRC0/8000"/>
 *     &lt;enumeration value="EVRC/8000"/>
 *     &lt;enumeration value="EVRCB/8000"/>
 *     &lt;enumeration value="EVRCB0/8000"/>
 *     &lt;enumeration value="iLBC/8000"/>
 *     &lt;enumeration value="GSM-HR-08/8000"/>
 *     &lt;enumeration value="GSM/8000"/>
 *     &lt;enumeration value="GSM-EFR/8000"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "CodecType")
@XmlEnum
public enum CodecType {


    /**
     * G711 mu-law codec.
     *           
     * 
     */
    @XmlEnumValue("G711U")
    G_711_U("G711U"),

    /**
     * G711 a-law codec.
     *           
     * 
     */
    @XmlEnumValue("G711A")
    G_711_A("G711A"),

    /**
     * G726 codec.
     *           
     * 
     */
    @XmlEnumValue("G726")
    G_726("G726"),

    /**
     * G729 codec.
     *           
     * 
     */
    @XmlEnumValue("G729")
    G_729("G729"),

    /**
     * G722 8kHz codec
     *           
     * 
     */
    @XmlEnumValue("G722/8000")
    G_722_8000("G722/8000"),

    /**
     * AMR wide-band 16kHz codec.
     *           
     * 
     */
    @XmlEnumValue("AMR-WB/16000")
    AMR_WB_16000("AMR-WB/16000"),

    /**
     * AMR narrow-band 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("AMR/8000")
    AMR_8000("AMR/8000"),

    /**
     * EVRC0 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("EVRC0/8000")
    EVRC_0_8000("EVRC0/8000"),

    /**
     * EVRC 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("EVRC/8000")
    EVRC_8000("EVRC/8000"),

    /**
     * EVRC annex B 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("EVRCB/8000")
    EVRCB_8000("EVRCB/8000"),

    /**
     * EVRC annex B 0 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("EVRCB0/8000")
    EVRCB_0_8000("EVRCB0/8000"),

    /**
     * iLBC 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("iLBC/8000")
    I_LBC_8000("iLBC/8000"),

    /**
     * GSM HR 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("GSM-HR-08/8000")
    GSM_HR_08_8000("GSM-HR-08/8000"),

    /**
     * GSM 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("GSM/8000")
    GSM_8000("GSM/8000"),

    /**
     * GSM-EFR 8kHz codec.
     *           
     * 
     */
    @XmlEnumValue("GSM-EFR/8000")
    GSM_EFR_8000("GSM-EFR/8000");
    private final String value;

    CodecType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CodecType fromValue(String v) {
        for (CodecType c: CodecType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
