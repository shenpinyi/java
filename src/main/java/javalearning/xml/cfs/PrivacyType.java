//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.06.14 at 11:04:31 AM AEST 
//


package javalearning.xml.cfs;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PrivacyType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="PrivacyType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="no indication"/>
 *     &lt;enumeration value="false"/>
 *     &lt;enumeration value="true"/>
 *     &lt;enumeration value="num not avail"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "PrivacyType")
@XmlEnum
public enum PrivacyType {


    /**
     * No indication available from the underlying network of
     *           what privacy treatment the user wants.
     *         
     * 
     */
    @XmlEnumValue("no indication")
    NO_INDICATION("no indication"),

    /**
     * The user does not require restricted handling of
     *             their identity.
     *           
     * 
     */
    @XmlEnumValue("false")
    FALSE("false"),

    /**
     * The user does require that their identity is withheld
     *             in public locations.
     *           
     * 
     */
    @XmlEnumValue("true")
    TRUE("true"),

    /**
     * The user's identity is not available.
     *           
     * 
     */
    @XmlEnumValue("num not avail")
    NUM_NOT_AVAIL("num not avail");
    private final String value;

    PrivacyType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static PrivacyType fromValue(String v) {
        for (PrivacyType c: PrivacyType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
