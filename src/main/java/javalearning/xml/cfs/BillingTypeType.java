//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.06.14 at 11:04:31 AM AEST 
//


package javalearning.xml.cfs;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for BillingTypeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="BillingTypeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="flat rate"/>
 *     &lt;enumeration value="msg rate"/>
 *     &lt;enumeration value="fx rate"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "BillingTypeType")
@XmlEnum
public enum BillingTypeType {


    /**
     * The user is charged a flat rate irrespective of usage.
     *           
     * 
     */
    @XmlEnumValue("flat rate")
    FLAT_RATE("flat rate"),

    /**
     * The user is charged for each call.
     *           
     * 
     */
    @XmlEnumValue("msg rate")
    MSG_RATE("msg rate"),

    /**
     * The line is served by an exchange in a different
     *             location from the subscriber (a foreign exchange). A Message
     *             Billing Index (MBI) should be specified in Number Validation for
     *             each call, which can be used to provide detailed control over
     *             billing.
     *           
     * 
     */
    @XmlEnumValue("fx rate")
    FX_RATE("fx rate");
    private final String value;

    BillingTypeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static BillingTypeType fromValue(String v) {
        for (BillingTypeType c: BillingTypeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
